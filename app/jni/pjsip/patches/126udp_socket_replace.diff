Index: pjproject/sources/pjlib/src/pj/ioqueue_common_abs.c
===================================================================
--- pjproject.orig/sources/pjlib/src/pj/ioqueue_common_abs.c
+++ pjproject/sources/pjlib/src/pj/ioqueue_common_abs.c
@@ -859,11 +859,19 @@ PJ_DEF(pj_status_t) pj_ioqueue_send( pj_
     struct write_operation *write_op;
     pj_status_t status;
     unsigned retry;
+    pj_bool_t restart_retry = PJ_FALSE;
     pj_ssize_t sent;
 
     PJ_ASSERT_RETURN(key && op_key && data && length, PJ_EINVAL);
     PJ_CHECK_STACK();
 
+#if defined(PJ_IPHONE_OS_HAS_MULTITASKING_SUPPORT) && \
+            PJ_IPHONE_OS_HAS_MULTITASKING_SUPPORT!=0
+retry_on_restart:
+#else
+        PJ_UNUSED_ARG(restart_retry);
+#endif
+
     /* Check if key is closing. */
     if (IS_CLOSING(key))
 	return PJ_ECANCELLED;
@@ -900,6 +908,23 @@ PJ_DEF(pj_status_t) pj_ioqueue_send( pj_
              * the error to caller.
              */
             if (status != PJ_STATUS_FROM_OS(PJ_BLOCKING_ERROR_VAL)) {
+#if defined(PJ_IPHONE_OS_HAS_MULTITASKING_SUPPORT) && \
+	    PJ_IPHONE_OS_HAS_MULTITASKING_SUPPORT!=0
+		/* Special treatment for dead UDP sockets here, see ticket #1107 */
+		if ((status==PJ_STATUS_FROM_OS(EPIPE) ||
+		     status==PJ_STATUS_FROM_OS(EDESTADDRREQ)) &&
+		    !IS_CLOSING(key) &&
+		    key->fd_type==pj_SOCK_DGRAM() && !restart_retry)
+		{
+		    PJ_PERROR(4,(THIS_FILE, status,
+				 "Send error for socket %d, retrying",
+				 key->fd));
+		    replace_udp_sock(key);
+		    restart_retry = PJ_TRUE;
+		    goto retry_on_restart;
+		}
+#endif
+
                 return status;
             }
         }
