Index: pjsip/sources/pjsip/src/pjsua-lib/pjsua_acc.c
===================================================================
--- pjsip.orig/sources/pjsip/src/pjsua-lib/pjsua_acc.c
+++ pjsip/sources/pjsip/src/pjsua-lib/pjsua_acc.c
@@ -1213,8 +1213,9 @@ PJ_DEF(pj_status_t) pjsua_acc_modify( pj
     acc->cfg.allow_contact_rewrite = cfg->allow_contact_rewrite;
     acc->cfg.reg_retry_interval = cfg->reg_retry_interval;
     acc->cfg.reg_first_retry_interval = cfg->reg_first_retry_interval;
-    acc->cfg.reg_retry_random_interval = cfg->reg_retry_random_interval;    
-    acc->cfg.drop_calls_on_reg_fail = cfg->drop_calls_on_reg_fail;
+    acc->cfg.reg_retry_random_interval = cfg->reg_retry_random_interval;
+	acc->cfg.reg_attempts_quick_retry = cfg->reg_attempts_quick_retry;
+	acc->cfg.drop_calls_on_reg_fail = cfg->drop_calls_on_reg_fail;
     acc->cfg.register_on_acc_add = cfg->register_on_acc_add;
     if (acc->cfg.reg_delay_before_refresh != cfg->reg_delay_before_refresh) {
         acc->cfg.reg_delay_before_refresh = cfg->reg_delay_before_refresh;
@@ -3592,7 +3593,7 @@ static void schedule_reregistration(pjsu
     acc->auto_rereg.timer.user_data = acc;
 
     /* Reregistration attempt. The first attempt will be done immediately. */
-    delay.sec = acc->auto_rereg.attempt_cnt? acc->cfg.reg_retry_interval :
+    delay.sec = acc->auto_rereg.attempt_cnt >= acc->cfg.reg_attempts_quick_retry ? acc->cfg.reg_retry_interval :
 					     acc->cfg.reg_first_retry_interval;
     delay.msec = 0;
 
@@ -3606,11 +3607,28 @@ static void schedule_reregistration(pjsu
 	    delay.msec = (pj_rand() % (delay.sec * 1000 + rand_ms));
 	}
     }
+
+	/* Call user callback to modify delay parameters */
+	if (pjsua_var.ua_cfg.cb.on_reregistration_compute_backoff) {
+		pj_reg_backoff_struct backoff_struct;
+
+		pj_time_val_normalize(&delay);
+		backoff_struct.attempt_cnt = acc->auto_rereg.attempt_cnt;
+		backoff_struct.delay.sec = delay.sec;
+		backoff_struct.delay.msec = delay.msec;
+
+		(*pjsua_var.ua_cfg.cb.on_reregistration_compute_backoff)(acc->index, &backoff_struct);
+
+		acc->auto_rereg.attempt_cnt = backoff_struct.attempt_cnt;
+		delay.sec = backoff_struct.delay.sec;
+		delay.msec = backoff_struct.delay.msec;
+	}
+
     pj_time_val_normalize(&delay);
 
     PJ_LOG(4,(THIS_FILE,
-	      "Scheduling re-registration retry for acc %d in %u seconds..",
-	      acc->index, delay.sec));
+	      "Scheduling re-registration retry for acc %d in %u seconds, attempt=%u ...",
+	      acc->index, delay.sec, acc->auto_rereg.attempt_cnt));
 
     acc->auto_rereg.timer.id = PJ_TRUE;
     if (pjsua_schedule_timer(&acc->auto_rereg.timer, &delay) != PJ_SUCCESS)
@@ -3676,3 +3694,28 @@ void pjsua_acc_on_tp_state_changed(pjsip
     PJSUA_UNLOCK();
     pj_log_pop_indent();
 }
+
+PJ_DEF(pj_status_t) pjsua_acc_reset_reg_attempts(pjsua_acc_id acc_id){
+	pjsua_acc *acc;
+	pj_status_t status = PJ_SUCCESS;
+	int oldAttemptValue = 0;
+
+	PJ_ASSERT_RETURN(acc_id>=0 && acc_id<(int)PJ_ARRAY_SIZE(pjsua_var.acc), PJ_EINVAL);
+
+	pj_log_push_indent();
+
+	PJSUA_LOCK();
+	acc = &pjsua_var.acc[acc_id];
+	oldAttemptValue = acc->auto_rereg.attempt_cnt;
+	acc->auto_rereg.attempt_cnt = 0;
+
+on_return:
+	PJSUA_UNLOCK();
+	PJ_LOG(4,(THIS_FILE, "Re-registration attempt counter, user %d, oldCtr: %d, reset to %d",
+			acc_id,
+			oldAttemptValue,
+			acc->auto_rereg.attempt_cnt)); //outside of the lock, attempt counter may have a new value.
+
+	pj_log_pop_indent();
+	return status;
+}
\ No newline at end of file
Index: pjsip/sources/pjsip/include/pjsua-lib/pjsua.h
===================================================================
--- pjsip.orig/sources/pjsip/include/pjsua-lib/pjsua.h
+++ pjsip/sources/pjsip/include/pjsua-lib/pjsua.h
@@ -286,6 +286,8 @@ typedef struct pjsua_msg_data pjsua_msg_
 /** Forward declaration for pj_stun_resolve_result */
 typedef struct pj_stun_resolve_result pj_stun_resolve_result;
 
+/** Forward declaration for pj_stun_resolve_result */
+typedef struct pj_reg_backoff_struct pj_reg_backoff_struct;
 
 /**
  * Maximum proxies in account.
@@ -1398,6 +1400,15 @@ typedef struct pjsua_callback
      */
     pj_stun_resolve_cb on_stun_resolution_complete;
 
+    /**
+     * Callback called when re-registration takes place.
+     * Called function gets pointers to attempt counter and delay that will be used so it can change its values
+     * before re-registration is scheduled.
+     *
+     * Changes to the backoff struct are reflected to the real reregistration parameters.
+     */
+    void (*on_reregistration_compute_backoff)(pjsua_acc_id acc_id, pj_reg_backoff_struct * backoff_struct);
+
 } pjsua_callback;
 
 
@@ -2243,6 +2254,14 @@ PJ_DECL(void) pjsua_perror(const char *s
 PJ_DECL(void) pjsua_dump(pj_bool_t detail);
 
 /**
+ * Registration backoff configuration structure.
+ */
+struct pj_reg_backoff_struct {
+    unsigned attempt_cnt;
+    pj_time_val delay;
+};
+
+/**
  * @}
  */
 
@@ -3441,6 +3460,14 @@ typedef struct pjsua_acc_config
      */
     pj_uint32_t        register_tsx_timeout;
 
+    /**
+     * Number of attempts for re-registrations (after previous fails)
+     * to use quick reregistration time with reg_first_retry_interval.
+     *
+     * Default: 1
+     */
+    pj_uint32_t        reg_attempts_quick_retry;
+
 } pjsua_acc_config;
 
 
@@ -3801,6 +3828,16 @@ PJ_DECL(pj_status_t) pjsua_acc_set_regis
 						pj_bool_t renew);
 
 /**
+ * Resets attempt counter for re-registration transaction for given account.
+ * Changes backoff mechanism.
+ *
+ * @param acc_id	The account ID.
+ *
+ * @return		PJ_SUCCESS on success, or the appropriate error code.
+ */
+PJ_DECL(pj_status_t) pjsua_acc_reset_reg_attempts(pjsua_acc_id acc_id);
+
+/**
  * Get information about the specified account.
  *
  * @param acc_id	Account identification.
Index: pjsip/sources/pjsip/src/pjsua-lib/pjsua_core.c
===================================================================
--- pjsip.orig/sources/pjsip/src/pjsua-lib/pjsua_core.c
+++ pjsip/sources/pjsip/src/pjsua-lib/pjsua_core.c
@@ -303,6 +303,7 @@ PJ_DEF(void) pjsua_acc_config_default(pj
     cfg->register_on_acc_add = PJ_TRUE;
     cfg->mwi_expires = PJSIP_MWI_DEFAULT_EXPIRES;
     cfg->register_tsx_timeout = 0;
+    cfg->reg_attempts_quick_retry = 1;
 }
 
 PJ_DEF(void) pjsua_buddy_config_default(pjsua_buddy_config *cfg)
