package net.phonex.soap;

import net.phonex.ksoap2.SoapEnvelope;
import net.phonex.ksoap2.serialization.MarshalBase64;
import net.phonex.ksoap2.serialization.MarshalDate;
import net.phonex.ksoap2.serialization.SoapSerializationEnvelope;
import net.phonex.ksoap2.transport.HttpTransportSE;
import net.phonex.soap.entities.GetOneTimeTokenRequest;
import net.phonex.soap.entities.GetOneTimeTokenResponse;
import net.phonex.util.Log;
import net.phonex.util.crypto.MessageDigest;

import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;



/**
 * One time token handler
 * @author ph4r05
 */
public class OneTimeToken {
	private static final String TAG="OneTimeToken";
	
	private GetOneTimeTokenRequest req;
	private String serviceEndpoint;
	
	// token generated by server for us
	private String oneTimeToken = null;

	/**
	 * Constructor - initialize internal fields
	 */
	public OneTimeToken() {
		req = new GetOneTimeTokenRequest();
	}

	/**
	 * Generates random user token
	 * @throws NoSuchAlgorithmException 
	 */
	public void generateUserToken() throws NoSuchAlgorithmException{
		req.setUserToken(MessageDigest.generateHash("userToken", true));
	}
	
	/**
	 * Obtains one time token from server
	 * @throws IOException 
	 */
	public String callGetOneTimeToken() throws IOException {
		// android http transport
		HttpTransportSE androidHttpTransport = null;
		// create soap envelope - wrapper for messages, messages kept are
		// bidirectional
		SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
		// add request as object to envelope
		soapEnvelope.setOutputSoapObject(req);

		// 2.nd variant is to use default marshalizer and implement
		// KvmSerializable
		// soapEnvelope.implicitTypes=false;
		new MarshalDate().register(soapEnvelope);
		new MarshalBase64().register(soapEnvelope);
		soapEnvelope.addMapping(ServiceConstants.NAMESPACE, "getOneTimeTokenRequest", new GetOneTimeTokenRequest().getClass());
		soapEnvelope.addMapping(ServiceConstants.NAMESPACE,	"getOneTimeTokenResponse", new GetOneTimeTokenResponse().getClass());
		// alternative - use specialized marshaler
		// MarshallGetOneTimeTokenRequest marsh = new MarshallGetOneTimeTokenRequest();
        // marsh.register(soapEnvelope);
		
		try {
			androidHttpTransport = new HttpTransportSE(this.serviceEndpoint);
			androidHttpTransport.debug = true;
			Log.inf(TAG, "ReqDump: %s", androidHttpTransport.requestDump);
			Log.i(TAG, "Prima di androidHttpTransport.call ");
			androidHttpTransport.call("getOneTimeToken", soapEnvelope);
			Log.inf(TAG, "ReqDump: %s", androidHttpTransport.requestDump);
			Log.inf(TAG, "RespDump: %s", androidHttpTransport.responseDump);
			Log.i(TAG, "call");
		} catch (XmlPullParserException e) {
			Log.e(TAG, "Problem during SOAP call - parse exception", e);
		}

		// first try - inspect response, but this does not contain umarshalled
		// class, it is just
		// vector of strings.
		Object resp = soapEnvelope.getResponse();
		Log.inf(TAG, "Pure object response retrieved, class: %s; %s", resp.getClass().getCanonicalName(), resp.toString());

		// touch this envelope in, should contain unmarshaled object (if there
		// is mapping provided),
		// otherwise it should contain SoapObject/SoapPrimitive
		Object obj = soapEnvelope.bodyIn;
		
		if (GetOneTimeTokenResponse.class.isInstance(obj)) {
			GetOneTimeTokenResponse resultsRequestSOAP = (GetOneTimeTokenResponse) obj;
			Log.inf(TAG, "Response casted properly! serverToken: %s", resultsRequestSOAP.getServerToken());

			this.oneTimeToken = resultsRequestSOAP.getServerToken(); 
			return this.oneTimeToken;
		} else {
			Log.e(TAG, "Unexpected response returned");
			Log.inf(TAG, "Pure object response retrieved, class: %s; %s", obj.getClass().getCanonicalName(), obj.toString());
			
			return null;
		}
	}

	public String getServiceEndpoint() {
		return serviceEndpoint;
	}

	public void setServiceEndpoint(String serviceEndpoint) {
		this.serviceEndpoint = serviceEndpoint;
	}

	public String getUser() {
		return req.getUser();
	}

	public void setUser(String value) {
		req.setUser(value);
	}

	public String getUserToken() {
		return req.getUserToken();
	}

	public void setUserToken(String value) {
		req.setUserToken(value);
	}

	public int getType() {
		return req.getType();
	}

	public void setType(int value) {
		req.setType(value);
	}

	public String getOneTimeToken() {
		return oneTimeToken;
	}
}
