/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.phonex.xv;

public class Xvi implements XviConstants {
  public static pj_str_t pj_str_copy(String str) {
    return new pj_str_t(XviJNI.pj_str_copy(str), true);
  }

  public static void setCallbackObject(Callback callback) {
    XviJNI.setCallbackObject(Callback.getCPtr(callback), callback);
  }

  public static pj_pool_t pjsua_pool_create(String name, long init_size, long increment) {
    long cPtr = XviJNI.pjsua_pool_create(name, init_size, increment);
    return (cPtr == 0) ? null : new pj_pool_t(cPtr, false);
  }

  public static void pj_pool_release(pj_pool_t pool) {
    XviJNI.pj_pool_release(pj_pool_t.getCPtr(pool), pool);
  }

  public static int pjmedia_tonegen_create2(pj_pool_t pool, pj_str_t name, long clock_rate, long channel_count, long samples_per_frame, long bits_per_sample, long options, pjmedia_port pp_port) {
    return XviJNI.pjmedia_tonegen_create2(pj_pool_t.getCPtr(pool), pool, pj_str_t.getCPtr(name), name, clock_rate, channel_count, samples_per_frame, bits_per_sample, options, pp_port);
  }

  public static int pjmedia_tonegen_play(pjmedia_port tonegen, long count, pjmedia_tone_desc[] tones, long options) {
    return XviJNI.pjmedia_tonegen_play(pjmedia_port.getCPtr(tonegen), tonegen, count, pjmedia_tone_desc.cArrayUnwrap(tones), options);
  }

  public static int pjmedia_tonegen_play_digits(pjmedia_port tonegen, long count, pjmedia_tone_digit[] digits, long options) {
    return XviJNI.pjmedia_tonegen_play_digits(pjmedia_port.getCPtr(tonegen), tonegen, count, pjmedia_tone_digit.cArrayUnwrap(digits), options);
  }

  public static int pjmedia_tonegen_rewind(pjmedia_port tonegen) {
    return XviJNI.pjmedia_tonegen_rewind(pjmedia_port.getCPtr(tonegen), tonegen);
  }

  public static int pjmedia_tonegen_stop(pjmedia_port tonegen) {
    return XviJNI.pjmedia_tonegen_stop(pjmedia_port.getCPtr(tonegen), tonegen);
  }

  public static int pjmedia_port_destroy(pjmedia_port port) {
    return XviJNI.pjmedia_port_destroy(pjmedia_port.getCPtr(port), port);
  }

  public static SWIGTYPE_p_pj_ssl_cipher new_sslCipherArray(int nelements) {
    long cPtr = XviJNI.new_sslCipherArray(nelements);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pj_ssl_cipher(cPtr, false);
  }

  public static void delete_sslCipherArray(SWIGTYPE_p_pj_ssl_cipher ary) {
    XviJNI.delete_sslCipherArray(SWIGTYPE_p_pj_ssl_cipher.getCPtr(ary));
  }

  public static pj_ssl_cipher sslCipherArray_getitem(SWIGTYPE_p_pj_ssl_cipher ary, int index) {
    return pj_ssl_cipher.swigToEnum(XviJNI.sslCipherArray_getitem(SWIGTYPE_p_pj_ssl_cipher.getCPtr(ary), index));
  }

  public static void sslCipherArray_setitem(SWIGTYPE_p_pj_ssl_cipher ary, int index, pj_ssl_cipher value) {
    XviJNI.sslCipherArray_setitem(SWIGTYPE_p_pj_ssl_cipher.getCPtr(ary), index, value.swigValue());
  }

  public static void setZrtpCallbackObject(ZrtpCallback callback) {
    XviJNI.setZrtpCallbackObject(ZrtpCallback.getCPtr(callback), callback);
  }

  public static int mobile_reg_handler_init() {
    return XviJNI.mobile_reg_handler_init();
  }

  public static void mobile_reg_handler_set_callback(MobileRegHandlerCallback callback) {
    XviJNI.mobile_reg_handler_set_callback(MobileRegHandlerCallback.getCPtr(callback), callback);
  }

  public static int mod_sign_init() {
    return XviJNI.mod_sign_init();
  }

  public static void mod_sign_set_callback(SignCallback callback) {
    XviJNI.mod_sign_set_callback(SignCallback.getCPtr(callback), callback);
  }

  public static int pjsip_rdata_get_signature(SWIGTYPE_p_pjsip_rx_data rdata, esign_process_info ret) {
    return XviJNI.pjsip_rdata_get_signature(SWIGTYPE_p_pjsip_rx_data.getCPtr(rdata), esign_process_info.getCPtr(ret), ret);
  }

  public static void logging_config_default(pjsua_logging_config cfg) {
    XviJNI.logging_config_default(pjsua_logging_config.getCPtr(cfg), cfg);
  }

  public static void logging_config_dup(pj_pool_t pool, pjsua_logging_config dst, pjsua_logging_config src) {
    XviJNI.logging_config_dup(pj_pool_t.getCPtr(pool), pool, pjsua_logging_config.getCPtr(dst), dst, pjsua_logging_config.getCPtr(src), src);
  }

  public static void config_default(pjsua_config cfg) {
    XviJNI.config_default(pjsua_config.getCPtr(cfg), cfg);
  }

  public static void config_dup(pj_pool_t pool, pjsua_config dst, pjsua_config src) {
    XviJNI.config_dup(pj_pool_t.getCPtr(pool), pool, pjsua_config.getCPtr(dst), dst, pjsua_config.getCPtr(src), src);
  }

  public static void msg_data_init(pjsua_msg_data msg_data) {
    XviJNI.msg_data_init(pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static pjsua_msg_data msg_data_clone(pj_pool_t pool, pjsua_msg_data rhs) {
    long cPtr = XviJNI.msg_data_clone(pj_pool_t.getCPtr(pool), pool, pjsua_msg_data.getCPtr(rhs), rhs);
    return (cPtr == 0) ? null : new pjsua_msg_data(cPtr, false);
  }

  public synchronized static int create() {
    return XviJNI.create();
  }

  public synchronized static int start() {
    return XviJNI.start();
  }

  public static pjsua_state get_state() {
    return pjsua_state.swigToEnum(XviJNI.get_state());
  }

  public synchronized static int handle_events(long msec_timeout) {
    return XviJNI.handle_events(msec_timeout);
  }

  public synchronized static void stop_worker_threads() {
    XviJNI.stop_worker_threads();
  }

  public static pj_pool_t pool_create(String name, long init_size, long increment) {
    long cPtr = XviJNI.pool_create(name, init_size, increment);
    return (cPtr == 0) ? null : new pj_pool_t(cPtr, false);
  }

  public synchronized static int reconfigure_logging(pjsua_logging_config c) {
    return XviJNI.reconfigure_logging(pjsua_logging_config.getCPtr(c), c);
  }

  public synchronized static SWIGTYPE_p_pjsip_endpoint get_pjsip_endpt() {
    long cPtr = XviJNI.get_pjsip_endpt();
    return (cPtr == 0) ? null : new SWIGTYPE_p_pjsip_endpoint(cPtr, false);
  }

  public synchronized static SWIGTYPE_p_pjmedia_endpt get_pjmedia_endpt() {
    long cPtr = XviJNI.get_pjmedia_endpt();
    return (cPtr == 0) ? null : new SWIGTYPE_p_pjmedia_endpt(cPtr, false);
  }

  public synchronized static SWIGTYPE_p_pj_pool_factory get_pool_factory() {
    long cPtr = XviJNI.get_pool_factory();
    return (cPtr == 0) ? null : new SWIGTYPE_p_pj_pool_factory(cPtr, false);
  }

  public synchronized static int reconfigure_dns(long count, pj_str_t[] servers) {
    return XviJNI.reconfigure_dns(count, pj_str_t.cArrayUnwrap(servers));
  }

  public synchronized static int reconfigure_resolver(long delay, long retry_cnt) {
    return XviJNI.reconfigure_resolver(delay, retry_cnt);
  }

  public static int detect_nat_type() {
    return XviJNI.detect_nat_type();
  }

  public static int get_nat_type(int[] type) {
    return XviJNI.get_nat_type(type);
  }

  public static int resolve_stun_servers(long count, pj_str_t[] srv, int wait, byte[] token, SWIGTYPE_p_f_p_q_const__pj_stun_resolve_result__void cb) {
    return XviJNI.resolve_stun_servers(count, pj_str_t.cArrayUnwrap(srv), wait, token, SWIGTYPE_p_f_p_q_const__pj_stun_resolve_result__void.getCPtr(cb));
  }

  public static int cancel_stun_resolution(byte[] token, int notify_cb) {
    return XviJNI.cancel_stun_resolution(token, notify_cb);
  }

  public static int verify_sip_url(String url) {
    return XviJNI.verify_sip_url(url);
  }

  public static int verify_url(String url) {
    return XviJNI.verify_url(url);
  }

  public synchronized static int schedule_timer(SWIGTYPE_p_pj_timer_entry entry, pj_time_val delay) {
    return XviJNI.schedule_timer(SWIGTYPE_p_pj_timer_entry.getCPtr(entry), pj_time_val.getCPtr(delay), delay);
  }

  public static int pjsua_schedule_timer2(SWIGTYPE_p_f_p_void__void cb, byte[] user_data, long msec_delay) {
    return XviJNI.pjsua_schedule_timer2(SWIGTYPE_p_f_p_void__void.getCPtr(cb), user_data, msec_delay);
  }

  public synchronized static void cancel_timer(SWIGTYPE_p_pj_timer_entry entry) {
    XviJNI.cancel_timer(SWIGTYPE_p_pj_timer_entry.getCPtr(entry));
  }

  public static void perror(String sender, String title, int status) {
    XviJNI.perror(sender, title, status);
  }

  public static void dump(int detail) {
    XviJNI.dump(detail);
  }

  public static void transport_config_default(pjsua_transport_config cfg) {
    XviJNI.transport_config_default(pjsua_transport_config.getCPtr(cfg), cfg);
  }

  public static void transport_config_dup(pj_pool_t pool, pjsua_transport_config dst, pjsua_transport_config src) {
    XviJNI.transport_config_dup(pj_pool_t.getCPtr(pool), pool, pjsua_transport_config.getCPtr(dst), dst, pjsua_transport_config.getCPtr(src), src);
  }

  public static int transport_create(pjsip_transport_type_e type, pjsua_transport_config cfg, int[] p_id) {
    return XviJNI.transport_create(type.swigValue(), pjsua_transport_config.getCPtr(cfg), cfg, p_id);
  }

  public static int transport_register(SWIGTYPE_p_pjsip_transport tp, int[] p_id) {
    return XviJNI.transport_register(SWIGTYPE_p_pjsip_transport.getCPtr(tp), p_id);
  }

  public static int enum_transports(int[] id, long[] count) {
    return XviJNI.enum_transports(id, count);
  }

  public static int transport_get_info(int id, pjsua_transport_info info) {
    return XviJNI.transport_get_info(id, pjsua_transport_info.getCPtr(info), info);
  }

  public static int transport_set_enable(int id, int enabled) {
    return XviJNI.transport_set_enable(id, enabled);
  }

  public static int transport_close(int id, int force) {
    return XviJNI.transport_close(id, force);
  }

  public static void ice_config_from_media_config(pj_pool_t pool, pjsua_ice_config dst, pjsua_media_config src) {
    XviJNI.ice_config_from_media_config(pj_pool_t.getCPtr(pool), pool, pjsua_ice_config.getCPtr(dst), dst, pjsua_media_config.getCPtr(src), src);
  }

  public static void ice_config_dup(pj_pool_t pool, pjsua_ice_config dst, pjsua_ice_config src) {
    XviJNI.ice_config_dup(pj_pool_t.getCPtr(pool), pool, pjsua_ice_config.getCPtr(dst), dst, pjsua_ice_config.getCPtr(src), src);
  }

  public static void turn_config_from_media_config(pj_pool_t pool, pjsua_turn_config dst, pjsua_media_config src) {
    XviJNI.turn_config_from_media_config(pj_pool_t.getCPtr(pool), pool, pjsua_turn_config.getCPtr(dst), dst, pjsua_media_config.getCPtr(src), src);
  }

  public static void turn_config_dup(pj_pool_t pool, pjsua_turn_config dst, pjsua_turn_config src) {
    XviJNI.turn_config_dup(pj_pool_t.getCPtr(pool), pool, pjsua_turn_config.getCPtr(dst), dst, pjsua_turn_config.getCPtr(src), src);
  }

  public static void acc_config_default(pjsua_acc_config cfg) {
    XviJNI.acc_config_default(pjsua_acc_config.getCPtr(cfg), cfg);
  }

  public static void acc_config_dup(pj_pool_t pool, pjsua_acc_config dst, pjsua_acc_config src) {
    XviJNI.acc_config_dup(pj_pool_t.getCPtr(pool), pool, pjsua_acc_config.getCPtr(dst), dst, pjsua_acc_config.getCPtr(src), src);
  }

  public static long acc_get_count() {
    return XviJNI.acc_get_count();
  }

  public static int acc_is_valid(int acc_id) {
    return XviJNI.acc_is_valid(acc_id);
  }

  public static int acc_set_default(int acc_id) {
    return XviJNI.acc_set_default(acc_id);
  }

  public static int acc_get_default() {
    return XviJNI.acc_get_default();
  }

  public static int acc_add(pjsua_acc_config acc_cfg, int is_default, int[] p_acc_id) {
    return XviJNI.acc_add(pjsua_acc_config.getCPtr(acc_cfg), acc_cfg, is_default, p_acc_id);
  }

  public static int acc_add_local(int tid, int is_default, int[] p_acc_id) {
    return XviJNI.acc_add_local(tid, is_default, p_acc_id);
  }

  public static int acc_set_user_data(int acc_id, byte[] user_data) {
    return XviJNI.acc_set_user_data(acc_id, user_data);
  }

  public static byte[] acc_get_user_data(int acc_id) {
	return XviJNI.acc_get_user_data(acc_id);
}

  public static int acc_del(int acc_id) {
    return XviJNI.acc_del(acc_id);
  }

  public static int acc_get_config(int acc_id, pj_pool_t pool, pjsua_acc_config acc_cfg) {
    return XviJNI.acc_get_config(acc_id, pj_pool_t.getCPtr(pool), pool, pjsua_acc_config.getCPtr(acc_cfg), acc_cfg);
  }

  public static int acc_modify(int acc_id, pjsua_acc_config acc_cfg) {
    return XviJNI.acc_modify(acc_id, pjsua_acc_config.getCPtr(acc_cfg), acc_cfg);
  }

  public static int acc_set_online_status(int acc_id, int is_online) {
    return XviJNI.acc_set_online_status(acc_id, is_online);
  }

  public static int acc_set_online_status2(int acc_id, int is_online, pjrpid_element pr) {
    return XviJNI.acc_set_online_status2(acc_id, is_online, pjrpid_element.getCPtr(pr), pr);
  }

  public static int acc_set_registration(int acc_id, int renew) {
    return XviJNI.acc_set_registration(acc_id, renew);
  }

  public static int acc_reset_reg_attempts(int acc_id) {
    return XviJNI.acc_reset_reg_attempts(acc_id);
  }

  public static int acc_get_info(int acc_id, pjsua_acc_info info) {
    return XviJNI.acc_get_info(acc_id, pjsua_acc_info.getCPtr(info), info);
  }

  public static int enum_accs(int[] ids, long[] count) {
    return XviJNI.enum_accs(ids, count);
  }

  public static int acc_enum_info(pjsua_acc_info info, long[] count) {
    return XviJNI.acc_enum_info(pjsua_acc_info.getCPtr(info), info, count);
  }

  public static int acc_find_for_outgoing(pj_str_t url) {
    return XviJNI.acc_find_for_outgoing(pj_str_t.getCPtr(url), url);
  }

  public static int acc_find_for_incoming(SWIGTYPE_p_pjsip_rx_data rdata) {
    return XviJNI.acc_find_for_incoming(SWIGTYPE_p_pjsip_rx_data.getCPtr(rdata));
  }

  public static int acc_create_request(int acc_id, SWIGTYPE_p_pjsip_method method, pj_str_t target, SWIGTYPE_p_p_pjsip_tx_data p_tdata) {
    return XviJNI.acc_create_request(acc_id, SWIGTYPE_p_pjsip_method.getCPtr(method), pj_str_t.getCPtr(target), target, SWIGTYPE_p_p_pjsip_tx_data.getCPtr(p_tdata));
  }

  public static int acc_create_uac_contact(pj_pool_t pool, pj_str_t contact, int acc_id, pj_str_t uri) {
    return XviJNI.acc_create_uac_contact(pj_pool_t.getCPtr(pool), pool, pj_str_t.getCPtr(contact), contact, acc_id, pj_str_t.getCPtr(uri), uri);
  }

  public static int acc_create_uas_contact(pj_pool_t pool, pj_str_t contact, int acc_id, SWIGTYPE_p_pjsip_rx_data rdata) {
    return XviJNI.acc_create_uas_contact(pj_pool_t.getCPtr(pool), pool, pj_str_t.getCPtr(contact), contact, acc_id, SWIGTYPE_p_pjsip_rx_data.getCPtr(rdata));
  }

  public static int acc_set_transport(int acc_id, int tp_id) {
    return XviJNI.acc_set_transport(acc_id, tp_id);
  }

  public static void call_setting_default(pjsua_call_setting opt) {
    XviJNI.call_setting_default(pjsua_call_setting.getCPtr(opt), opt);
  }

  public static void call_vid_strm_op_param_default(pjsua_call_vid_strm_op_param param) {
    XviJNI.call_vid_strm_op_param_default(pjsua_call_vid_strm_op_param.getCPtr(param), param);
  }

  public static long call_get_max_count() {
    return XviJNI.call_get_max_count();
  }

  public static long call_get_count() {
    return XviJNI.call_get_count();
  }

  public static int enum_calls(int[] ids, long[] count) {
    return XviJNI.enum_calls(ids, count);
  }

  public static int call_make_call(int acc_id, pj_str_t dst_uri, pjsua_call_setting opt, byte[] user_data, pjsua_msg_data msg_data, int[] p_call_id) {
    return XviJNI.call_make_call(acc_id, pj_str_t.getCPtr(dst_uri), dst_uri, pjsua_call_setting.getCPtr(opt), opt, user_data, pjsua_msg_data.getCPtr(msg_data), msg_data, p_call_id);
  }

  public static int call_is_active(int call_id) {
    return XviJNI.call_is_active(call_id);
  }

  public static int call_has_media(int call_id) {
    return XviJNI.call_has_media(call_id);
  }

  public static int call_get_conf_port(int call_id) {
    return XviJNI.call_get_conf_port(call_id);
  }

  public static int call_get_info(int call_id, pjsua_call_info info) {
    return XviJNI.call_get_info(call_id, pjsua_call_info.getCPtr(info), info);
  }

  public static SWIGTYPE_p_pjsip_dialog_cap_status call_remote_has_cap(int call_id, int htype, pj_str_t hname, pj_str_t token) {
    return new SWIGTYPE_p_pjsip_dialog_cap_status(XviJNI.call_remote_has_cap(call_id, htype, pj_str_t.getCPtr(hname), hname, pj_str_t.getCPtr(token), token), true);
  }

  public static int call_set_user_data(int call_id, byte[] user_data) {
    return XviJNI.call_set_user_data(call_id, user_data);
  }

  public static byte[] call_get_user_data(int call_id) {
	return XviJNI.call_get_user_data(call_id);
}

  public static int call_get_rem_nat_type(int call_id, int[] p_type) {
    return XviJNI.call_get_rem_nat_type(call_id, p_type);
  }

  public static int call_answer(int call_id, long code, pj_str_t reason, pjsua_msg_data msg_data) {
    return XviJNI.call_answer(call_id, code, pj_str_t.getCPtr(reason), reason, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_answer2(int call_id, pjsua_call_setting opt, long code, pj_str_t reason, pjsua_msg_data msg_data) {
    return XviJNI.call_answer2(call_id, pjsua_call_setting.getCPtr(opt), opt, code, pj_str_t.getCPtr(reason), reason, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_terminate(int call_id, long code) {
    return XviJNI.call_terminate(call_id, code);
  }

  public static int call_hangup(int call_id, long code, pj_str_t reason, pjsua_msg_data msg_data) {
    return XviJNI.call_hangup(call_id, code, pj_str_t.getCPtr(reason), reason, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_process_redirect(int call_id, pjsip_redirect_op cmd) {
    return XviJNI.call_process_redirect(call_id, cmd.swigValue());
  }

  public static int call_set_hold(int call_id, pjsua_msg_data msg_data) {
    return XviJNI.call_set_hold(call_id, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_set_hold2(int call_id, long options, pjsua_msg_data msg_data) {
    return XviJNI.call_set_hold2(call_id, options, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_reinvite(int call_id, long options, pjsua_msg_data msg_data) {
    return XviJNI.call_reinvite(call_id, options, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_reinvite2(int call_id, pjsua_call_setting opt, pjsua_msg_data msg_data) {
    return XviJNI.call_reinvite2(call_id, pjsua_call_setting.getCPtr(opt), opt, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_update(int call_id, long options, pjsua_msg_data msg_data) {
    return XviJNI.call_update(call_id, options, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_update2(int call_id, pjsua_call_setting opt, pjsua_msg_data msg_data) {
    return XviJNI.call_update2(call_id, pjsua_call_setting.getCPtr(opt), opt, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_xfer(int call_id, pj_str_t dest, pjsua_msg_data msg_data) {
    return XviJNI.call_xfer(call_id, pj_str_t.getCPtr(dest), dest, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_xfer_replaces(int call_id, int dest_call_id, long options, pjsua_msg_data msg_data) {
    return XviJNI.call_xfer_replaces(call_id, dest_call_id, options, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_dial_dtmf(int call_id, pj_str_t digits) {
    return XviJNI.call_dial_dtmf(call_id, pj_str_t.getCPtr(digits), digits);
  }

  public static int call_send_im(int call_id, pj_str_t mime_type, pj_str_t content, pjsua_msg_data msg_data, byte[] user_data) {
    return XviJNI.call_send_im(call_id, pj_str_t.getCPtr(mime_type), mime_type, pj_str_t.getCPtr(content), content, pjsua_msg_data.getCPtr(msg_data), msg_data, user_data);
  }

  public static int call_send_typing_ind(int call_id, int is_typing, pjsua_msg_data msg_data) {
    return XviJNI.call_send_typing_ind(call_id, is_typing, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int call_send_request(int call_id, pj_str_t method, pjsua_msg_data msg_data) {
    return XviJNI.call_send_request(call_id, pj_str_t.getCPtr(method), method, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static void call_hangup_all() {
    XviJNI.call_hangup_all();
  }

  public static int call_dump(int call_id, int with_media, String buffer, long maxlen, String indent) {
    return XviJNI.call_dump__SWIG_0(call_id, with_media, buffer, maxlen, indent);
  }

  public static int call_get_vid_stream_idx(int call_id) {
    return XviJNI.call_get_vid_stream_idx(call_id);
  }

  public static int call_vid_stream_is_running(int call_id, int med_idx, pjmedia_dir dir) {
    return XviJNI.call_vid_stream_is_running(call_id, med_idx, dir.swigValue());
  }

  public static int call_set_vid_strm(int call_id, pjsua_call_vid_strm_op op, pjsua_call_vid_strm_op_param param) {
    return XviJNI.call_set_vid_strm(call_id, op.swigValue(), pjsua_call_vid_strm_op_param.getCPtr(param), param);
  }

  public static int call_get_stream_info(int call_id, long med_idx, pjsua_stream_info psi) {
    return XviJNI.call_get_stream_info(call_id, med_idx, pjsua_stream_info.getCPtr(psi), psi);
  }

  public static int call_get_stream_stat(int call_id, long med_idx, pjsua_stream_stat stat) {
    return XviJNI.call_get_stream_stat(call_id, med_idx, pjsua_stream_stat.getCPtr(stat), stat);
  }

  public static int call_get_med_transport_info(int call_id, long med_idx, SWIGTYPE_p_pjmedia_transport_info t) {
    return XviJNI.call_get_med_transport_info(call_id, med_idx, SWIGTYPE_p_pjmedia_transport_info.getCPtr(t));
  }

  public static int enum_buddies(int[] ids, long[] count) {
    return XviJNI.enum_buddies(ids, count);
  }

  public static SWIGTYPE_p_pjsip_method getPjsip_message_method() {
    return new SWIGTYPE_p_pjsip_method(XviJNI.pjsip_message_method_get(), true);
  }

  public static SWIGTYPE_p_pjsip_method getPjsip_info_method() {
    return new SWIGTYPE_p_pjsip_method(XviJNI.pjsip_info_method_get(), true);
  }

  public static int im_send(int acc_id, pj_str_t to, pj_str_t mime_type, pj_str_t content, pjsua_msg_data msg_data, byte[] user_data) {
    return XviJNI.im_send(acc_id, pj_str_t.getCPtr(to), to, pj_str_t.getCPtr(mime_type), mime_type, pj_str_t.getCPtr(content), content, pjsua_msg_data.getCPtr(msg_data), msg_data, user_data);
  }

  public static int im_typing(int acc_id, pj_str_t to, int is_typing, pjsua_msg_data msg_data) {
    return XviJNI.im_typing(acc_id, pj_str_t.getCPtr(to), to, is_typing, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static void media_config_default(pjsua_media_config cfg) {
    XviJNI.media_config_default(pjsua_media_config.getCPtr(cfg), cfg);
  }

  public static long conf_get_max_ports() {
    return XviJNI.conf_get_max_ports();
  }

  public static long conf_get_active_ports() {
    return XviJNI.conf_get_active_ports();
  }

  public static int enum_conf_ports(int[] id, long[] count) {
    return XviJNI.enum_conf_ports(id, count);
  }

  public static int conf_get_port_info(int port_id, pjsua_conf_port_info info) {
    return XviJNI.conf_get_port_info(port_id, pjsua_conf_port_info.getCPtr(info), info);
  }

  public static int conf_add_port(pj_pool_t pool, pjmedia_port port, int[] p_id) {
    return XviJNI.conf_add_port(pj_pool_t.getCPtr(pool), pool, pjmedia_port.getCPtr(port), port, p_id);
  }

  public static int conf_remove_port(int port_id) {
    return XviJNI.conf_remove_port(port_id);
  }

  public static int conf_connect(int source, int sink) {
    return XviJNI.conf_connect(source, sink);
  }

  public static int conf_disconnect(int source, int sink) {
    return XviJNI.conf_disconnect(source, sink);
  }

  public static int conf_adjust_tx_level(int slot, float level) {
    return XviJNI.conf_adjust_tx_level(slot, level);
  }

  public static int conf_adjust_rx_level(int slot, float level) {
    return XviJNI.conf_adjust_rx_level(slot, level);
  }

  public static int conf_get_signal_level(int slot, long[] tx_level, long[] rx_level) {
    return XviJNI.conf_get_signal_level(slot, tx_level, rx_level);
  }

  public static double conf_get_underflow_ratio(int slot) {
    return XviJNI.conf_get_underflow_ratio(slot);
  }

  public synchronized static int playlist_create(pj_str_t[] file_names, long file_count, pj_str_t label, long options, int[] p_id) {
    return XviJNI.playlist_create(pj_str_t.cArrayUnwrap(file_names), file_count, pj_str_t.getCPtr(label), label, options, p_id);
  }

  public static int enum_aud_devs(SWIGTYPE_p_pjmedia_aud_dev_info info, long[] count) {
    return XviJNI.enum_aud_devs(SWIGTYPE_p_pjmedia_aud_dev_info.getCPtr(info), count);
  }

  public static int enum_snd_devs(pjmedia_snd_dev_info info, long[] count) {
    return XviJNI.enum_snd_devs(pjmedia_snd_dev_info.getCPtr(info), info, count);
  }

  public static int get_snd_dev(int[] capture_dev, int[] playback_dev) {
    return XviJNI.get_snd_dev(capture_dev, playback_dev);
  }

  public static int set_snd_dev(int capture_dev, int playback_dev) {
    return XviJNI.set_snd_dev(capture_dev, playback_dev);
  }

  public static int set_null_snd_dev() {
    return XviJNI.set_null_snd_dev();
  }

  public static pjmedia_port set_no_snd_dev() {
    long cPtr = XviJNI.set_no_snd_dev();
    return (cPtr == 0) ? null : new pjmedia_port(cPtr, false);
  }

  public static int set_ec(long tail_ms, long options) {
    return XviJNI.set_ec(tail_ms, options);
  }

  public static int get_ec_tail(SWIGTYPE_p_unsigned_int p_tail_ms) {
    return XviJNI.get_ec_tail(SWIGTYPE_p_unsigned_int.getCPtr(p_tail_ms));
  }

  public static int snd_is_active() {
    return XviJNI.snd_is_active();
  }

  public static int snd_set_setting(SWIGTYPE_p_pjmedia_aud_dev_cap cap, byte[] pval, int keep) {
    return XviJNI.snd_set_setting(SWIGTYPE_p_pjmedia_aud_dev_cap.getCPtr(cap), pval, keep);
  }

  public static int snd_get_setting(SWIGTYPE_p_pjmedia_aud_dev_cap cap, byte[] pval) {
    return XviJNI.snd_get_setting(SWIGTYPE_p_pjmedia_aud_dev_cap.getCPtr(cap), pval);
  }

  public static int enum_codecs(pjsua_codec_info id, long[] count) {
    return XviJNI.enum_codecs(pjsua_codec_info.getCPtr(id), id, count);
  }

  public static int codec_set_priority(pj_str_t codec_id, short priority) {
    return XviJNI.codec_set_priority(pj_str_t.getCPtr(codec_id), codec_id, priority);
  }

  public static int codec_get_param(pj_str_t codec_id, SWIGTYPE_p_pjmedia_codec_param param) {
    return XviJNI.codec_get_param(pj_str_t.getCPtr(codec_id), codec_id, SWIGTYPE_p_pjmedia_codec_param.getCPtr(param));
  }

  public static int codec_set_param(pj_str_t codec_id, SWIGTYPE_p_pjmedia_codec_param param) {
    return XviJNI.codec_set_param(pj_str_t.getCPtr(codec_id), codec_id, SWIGTYPE_p_pjmedia_codec_param.getCPtr(param));
  }

  public static long vid_dev_count() {
    return XviJNI.vid_dev_count();
  }

  public static int vid_dev_get_info(SWIGTYPE_p_pjmedia_vid_dev_index id, SWIGTYPE_p_pjmedia_vid_dev_info vdi) {
    return XviJNI.vid_dev_get_info(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id), SWIGTYPE_p_pjmedia_vid_dev_info.getCPtr(vdi));
  }

  public static int vid_dev_is_active(SWIGTYPE_p_pjmedia_vid_dev_index id) {
    return XviJNI.vid_dev_is_active(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id));
  }

  public static int vid_dev_set_setting(SWIGTYPE_p_pjmedia_vid_dev_index id, SWIGTYPE_p_pjmedia_vid_dev_cap cap, byte[] pval, int keep) {
    return XviJNI.vid_dev_set_setting(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id), SWIGTYPE_p_pjmedia_vid_dev_cap.getCPtr(cap), pval, keep);
  }

  public static int vid_dev_get_setting(SWIGTYPE_p_pjmedia_vid_dev_index id, SWIGTYPE_p_pjmedia_vid_dev_cap cap, byte[] pval) {
    return XviJNI.vid_dev_get_setting(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id), SWIGTYPE_p_pjmedia_vid_dev_cap.getCPtr(cap), pval);
  }

  public static int vid_enum_devs(SWIGTYPE_p_pjmedia_vid_dev_info info, long[] count) {
    return XviJNI.vid_enum_devs(SWIGTYPE_p_pjmedia_vid_dev_info.getCPtr(info), count);
  }

  public static void vid_preview_param_default(pjsua_vid_preview_param p) {
    XviJNI.vid_preview_param_default(pjsua_vid_preview_param.getCPtr(p), p);
  }

  public static int vid_preview_has_native(SWIGTYPE_p_pjmedia_vid_dev_index id) {
    return XviJNI.vid_preview_has_native(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id));
  }

  public static int vid_preview_start(SWIGTYPE_p_pjmedia_vid_dev_index id, pjsua_vid_preview_param p) {
    return XviJNI.vid_preview_start(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id), pjsua_vid_preview_param.getCPtr(p), p);
  }

  public static int vid_preview_get_win(SWIGTYPE_p_pjmedia_vid_dev_index id) {
    return XviJNI.vid_preview_get_win(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id));
  }

  public static int vid_preview_stop(SWIGTYPE_p_pjmedia_vid_dev_index id) {
    return XviJNI.vid_preview_stop(SWIGTYPE_p_pjmedia_vid_dev_index.getCPtr(id));
  }

  public static int vid_enum_wins(int[] wids, long[] count) {
    return XviJNI.vid_enum_wins(wids, count);
  }

  public static int vid_win_get_info(int wid, pjsua_vid_win_info wi) {
    return XviJNI.vid_win_get_info(wid, pjsua_vid_win_info.getCPtr(wi), wi);
  }

  public static int vid_win_set_show(int wid, int show) {
    return XviJNI.vid_win_set_show(wid, show);
  }

  public static int vid_win_set_pos(int wid, SWIGTYPE_p_pjmedia_coord pos) {
    return XviJNI.vid_win_set_pos(wid, SWIGTYPE_p_pjmedia_coord.getCPtr(pos));
  }

  public static int vid_win_set_size(int wid, SWIGTYPE_p_pjmedia_rect_size size) {
    return XviJNI.vid_win_set_size(wid, SWIGTYPE_p_pjmedia_rect_size.getCPtr(size));
  }

  public static int vid_win_set_win(int wid, SWIGTYPE_p_pjmedia_vid_dev_hwnd win) {
    return XviJNI.vid_win_set_win(wid, SWIGTYPE_p_pjmedia_vid_dev_hwnd.getCPtr(win));
  }

  public static int vid_win_rotate(int wid, int angle) {
    return XviJNI.vid_win_rotate(wid, angle);
  }

  public static int vid_enum_codecs(pjsua_codec_info id, long[] count) {
    return XviJNI.vid_enum_codecs(pjsua_codec_info.getCPtr(id), id, count);
  }

  public static int vid_codec_set_priority(pj_str_t codec_id, short priority) {
    return XviJNI.vid_codec_set_priority(pj_str_t.getCPtr(codec_id), codec_id, priority);
  }

  public static int vid_codec_get_param(pj_str_t codec_id, SWIGTYPE_p_pjmedia_vid_codec_param param) {
    return XviJNI.vid_codec_get_param(pj_str_t.getCPtr(codec_id), codec_id, SWIGTYPE_p_pjmedia_vid_codec_param.getCPtr(param));
  }

  public static int vid_codec_set_param(pj_str_t codec_id, SWIGTYPE_p_pjmedia_vid_codec_param param) {
    return XviJNI.vid_codec_set_param(pj_str_t.getCPtr(codec_id), codec_id, SWIGTYPE_p_pjmedia_vid_codec_param.getCPtr(param));
  }

  public static int send_dtmf_info(int current_call, pj_str_t digits) {
    return XviJNI.send_dtmf_info(current_call, pj_str_t.getCPtr(digits), digits);
  }

  public static pj_str_t call_dump(int call_id, int with_media, String indent) {
    return new pj_str_t(XviJNI.call_dump__SWIG_1(call_id, with_media, indent), true);
  }

  public static pj_str_t call_secure_media_info(int call_id) {
    return new pj_str_t(XviJNI.call_secure_media_info(call_id), true);
  }

  public static int call_secure_sig_level(int call_id) {
    return XviJNI.call_secure_sig_level(call_id);
  }

  public static pj_str_t get_error_message(int status) {
    return new pj_str_t(XviJNI.get_error_message(status), true);
  }

  public static int get_event_status_code(pjsip_event e) {
    return XviJNI.get_event_status_code(pjsip_event.getCPtr(e), e);
  }

  public static int call_hangup_ex(int call_id, long code, pj_str_t reason) {
    return XviJNI.call_hangup_ex(call_id, code, pj_str_t.getCPtr(reason), reason);
  }

  public static pj_str_t get_call_hangup_cause(pjsip_event e) {
    return new pj_str_t(XviJNI.get_call_hangup_cause(pjsip_event.getCPtr(e), e), true);
  }

  public static int get_call_hangup_cause_int(pjsip_event e) {
    return XviJNI.get_call_hangup_cause_int(pjsip_event.getCPtr(e), e);
  }

  public static pj_str_t search_for_header(pj_str_t hdr, SWIGTYPE_p_pjsip_msg msg) {
    return new pj_str_t(XviJNI.search_for_header(pj_str_t.getCPtr(hdr), hdr, SWIGTYPE_p_pjsip_msg.getCPtr(msg)), true);
  }

  public static pj_str_t get_callid_from_msg(SWIGTYPE_p_pjsip_msg msg) {
    return new pj_str_t(XviJNI.get_callid_from_msg(SWIGTYPE_p_pjsip_msg.getCPtr(msg)), true);
  }

  public static pj_str_t get_callid_from_evt(pjsip_event e) {
    return new pj_str_t(XviJNI.get_callid_from_evt(pjsip_event.getCPtr(e), e), true);
  }

  public static SWIGTYPE_p_pjsip_msg get_msg_from_evt(pjsip_event e) {
    long cPtr = XviJNI.get_msg_from_evt(pjsip_event.getCPtr(e), e);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pjsip_msg(cPtr, false);
  }

  public static void sipstack_config_default(sipstack_config css_cfg) {
    XviJNI.sipstack_config_default(sipstack_config.getCPtr(css_cfg), css_cfg);
  }

  public static void sipstack_acc_config_default(sipstack_acc_config css_acc_cfg) {
    XviJNI.sipstack_acc_config_default(sipstack_acc_config.getCPtr(css_acc_cfg), css_acc_cfg);
  }

  public static int sipstack_init(pjsua_config ua_cfg, pjsua_logging_config log_cfg, pjsua_media_config media_cfg, sipstack_config css_cfg, Object context) {
    return XviJNI.sipstack_init(pjsua_config.getCPtr(ua_cfg), ua_cfg, pjsua_logging_config.getCPtr(log_cfg), log_cfg, pjsua_media_config.getCPtr(media_cfg), media_cfg, sipstack_config.getCPtr(css_cfg), css_cfg, context);
  }

  public static int sipstack_destroy(long flags) {
    return XviJNI.sipstack_destroy(flags);
  }

  public static int sipstack_set_acc_user_data(pjsua_acc_config acc_cfg, sipstack_acc_config css_acc_cfg) {
    return XviJNI.sipstack_set_acc_user_data(pjsua_acc_config.getCPtr(acc_cfg), acc_cfg, sipstack_acc_config.getCPtr(css_acc_cfg), css_acc_cfg);
  }

  public static int sipstack_init_acc_msg_data(pj_pool_t pool, int acc_id, pjsua_msg_data msg_data) {
    return XviJNI.sipstack_init_acc_msg_data(pj_pool_t.getCPtr(pool), pool, acc_id, pjsua_msg_data.getCPtr(msg_data), msg_data);
  }

  public static int sipstack_msg_data_add_string_hdr(pj_pool_t pool, pjsua_msg_data msg_data, pj_str_t hdr_name, pj_str_t hdr_value) {
    return XviJNI.sipstack_msg_data_add_string_hdr(pj_pool_t.getCPtr(pool), pool, pjsua_msg_data.getCPtr(msg_data), msg_data, pj_str_t.getCPtr(hdr_name), hdr_name, pj_str_t.getCPtr(hdr_value), hdr_value);
  }

  public static int pj_timer_fire(int entry_id) {
    return XviJNI.pj_timer_fire(entry_id);
  }

  public static int update_transport(pj_str_t new_ip_addr) {
    return XviJNI.update_transport(pj_str_t.getCPtr(new_ip_addr), new_ip_addr);
  }

  public static int vid_set_android_renderer(int call_id, Object window) {
    return XviJNI.vid_set_android_renderer(call_id, window);
  }

  public static int vid_set_android_capturer(Object window) {
    return XviJNI.vid_set_android_capturer(window);
  }

  public static int set_turn_credentials(pj_str_t username, pj_str_t password, pj_str_t realm, SWIGTYPE_p_pj_stun_auth_cred turn_auth_cred) {
    return XviJNI.set_turn_credentials(pj_str_t.getCPtr(username), username, pj_str_t.getCPtr(password), password, pj_str_t.getCPtr(realm), realm, SWIGTYPE_p_pj_stun_auth_cred.getCPtr(turn_auth_cred));
  }

  public static pj_str_t get_rx_data_header(pj_str_t name, SWIGTYPE_p_pjsip_rx_data data) {
    return new pj_str_t(XviJNI.get_rx_data_header(pj_str_t.getCPtr(name), name, SWIGTYPE_p_pjsip_rx_data.getCPtr(data)), true);
  }

  public static SWIGTYPE_p_pjsip_transport get_transport(pjsua_reg_info info) {
    long cPtr = XviJNI.get_transport(pjsua_reg_info.getCPtr(info), info);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pjsip_transport(cPtr, false);
  }

  public static int get_transport_ptr(SWIGTYPE_p_pjsip_transport transport) {
    return XviJNI.get_transport_ptr(SWIGTYPE_p_pjsip_transport.getCPtr(transport));
  }

  public static int call_get_state(int call_id) {
    return XviJNI.call_get_state(call_id);
  }

  public static int play_zrtp_ok_sound() {
    return XviJNI.play_zrtp_ok_sound();
  }

  public static int sipstack_is_underflow_event(SWIGTYPE_p_pjmedia_event event) {
    return XviJNI.sipstack_is_underflow_event(SWIGTYPE_p_pjmedia_event.getCPtr(event));
  }

  public static pjmedia_event_underflow_data sipstack_get_underflow_data(SWIGTYPE_p_pjmedia_event event) {
    return new pjmedia_event_underflow_data(XviJNI.sipstack_get_underflow_data(SWIGTYPE_p_pjmedia_event.getCPtr(event)), true);
  }

  public static void css_on_call_state(int call_id, pjsip_event e) {
    XviJNI.css_on_call_state(call_id, pjsip_event.getCPtr(e), e);
  }

  public static void css_on_call_media_state(int call_id) {
    XviJNI.css_on_call_media_state(call_id);
  }

  public static int acc_set_custom_online_status(int acc_id, int is_online, String statusText) {
    return XviJNI.acc_set_custom_online_status(acc_id, is_online, statusText);
  }

  public static int pjsua_is_thread_registered() {
    return XviJNI.pjsua_is_thread_registered();
  }

  public synchronized static int register_thread(int processId, int threadId) {
    return XviJNI.register_thread(processId, threadId);
  }

  public synchronized static int register_thread2(String thread_name) {
    return XviJNI.register_thread2(thread_name);
  }

  public static void pjsua_kill() {
    XviJNI.pjsua_kill();
  }

  public static void pjsua_assert() {
    XviJNI.pjsua_assert();
  }

  public static String conv_pj_str_t_to_jstring(pj_str_t pj_string) {
    return XviJNI.conv_pj_str_t_to_jstring(pj_str_t.getCPtr(pj_string), pj_string);
  }

  public static int openssl_DH_genPrime(long prime_len, String buffer, long maxlen) {
    return XviJNI.openssl_DH_genPrime(prime_len, buffer, maxlen);
  }

  public static int openssl_DH_check(String buffer) {
    return XviJNI.openssl_DH_check(buffer);
  }

  public static SWIGTYPE_p_pjmedia_transport on_zrtp_transport_created(int call_id, long media_idx, SWIGTYPE_p_pjmedia_transport base_tp, long flags) {
    long cPtr = XviJNI.on_zrtp_transport_created(call_id, media_idx, SWIGTYPE_p_pjmedia_transport.getCPtr(base_tp), flags);
    return (cPtr == 0) ? null : new SWIGTYPE_p_pjmedia_transport(cPtr, false);
  }

  public static void jzrtp_SASVerified(int call_id) {
    XviJNI.jzrtp_SASVerified(call_id);
  }

  public static void jzrtp_SASRevoked(int call_id) {
    XviJNI.jzrtp_SASRevoked(call_id);
  }

  public static zrtp_state_info jzrtp_getInfoFromCall(int call_id) {
    return new zrtp_state_info(XviJNI.jzrtp_getInfoFromCall(call_id), true);
  }

  public static void jzrtp_addEntropy(byte[] entropyBuffer) {
    XviJNI.jzrtp_addEntropy(entropyBuffer);
  }

  public static int jzrtp_zrtp_loadlib(pj_str_t glueLibPath, pj_str_t zrtpLibPath) {
    return XviJNI.jzrtp_zrtp_loadlib(pj_str_t.getCPtr(glueLibPath), glueLibPath, pj_str_t.getCPtr(zrtpLibPath), zrtpLibPath);
  }

  public static int jzrtp_zrtp_unloadlib() {
    return XviJNI.jzrtp_zrtp_unloadlib();
  }

  public static pj_str_t jzrtp_zrtp_call_dump(int call_id, String indent) {
    return new pj_str_t(XviJNI.jzrtp_zrtp_call_dump(call_id, indent), true);
  }

  public static int codecs_get_nbr() {
    return XviJNI.codecs_get_nbr();
  }

  public static pj_str_t codecs_get_id(int codec_id) {
    return new pj_str_t(XviJNI.codecs_get_id(codec_id), true);
  }

  public static int codecs_vid_get_nbr() {
    return XviJNI.codecs_vid_get_nbr();
  }

  public static pj_str_t codecs_vid_get_id(int codec_id) {
    return new pj_str_t(XviJNI.codecs_vid_get_id(codec_id), true);
  }

  public static int codec_set_frames_per_packet(pj_str_t codec_id, int frames_per_packet) {
    return XviJNI.codec_set_frames_per_packet(pj_str_t.getCPtr(codec_id), codec_id, frames_per_packet);
  }

  public static int codec_h264_set_profile(long profile_id, long level_id, long width, long height, long fps, long avg_kbps, long max_kbps) {
    return XviJNI.codec_h264_set_profile(profile_id, level_id, width, height, fps, avg_kbps, max_kbps);
  }

}
